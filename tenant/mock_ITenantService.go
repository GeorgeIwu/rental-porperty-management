// Code generated by mockery v2.13.1. DO NOT EDIT.

package tenant

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockITenantService is an autogenerated mock type for the ITenantService type
type MockITenantService struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, attributes
func (_m *MockITenantService) Create(c context.Context, attributes TenantRequest) (*Tenant, error) {
	ret := _m.Called(c, attributes)

	var r0 *Tenant
	if rf, ok := ret.Get(0).(func(context.Context, TenantRequest) *Tenant); ok {
		r0 = rf(c, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, TenantRequest) error); ok {
		r1 = rf(c, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, searchBy, sortBy, pageNumber, itemsPerPage
func (_m *MockITenantService) Fetch(ctx context.Context, searchBy string, sortBy string, pageNumber int, itemsPerPage int) ([]*Tenant, error) {
	ret := _m.Called(ctx, searchBy, sortBy, pageNumber, itemsPerPage)

	var r0 []*Tenant
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, int) []*Tenant); ok {
		r0 = rf(ctx, searchBy, sortBy, pageNumber, itemsPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, int) error); ok {
		r1 = rf(ctx, searchBy, sortBy, pageNumber, itemsPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: c, id
func (_m *MockITenantService) FetchByID(c context.Context, id int) (*Tenant, error) {
	ret := _m.Called(c, id)

	var r0 *Tenant
	if rf, ok := ret.Get(0).(func(context.Context, int) *Tenant); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: c, propertyID
func (_m *MockITenantService) Remove(c context.Context, propertyID int) error {
	ret := _m.Called(c, propertyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(c, propertyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c, propertyID, r
func (_m *MockITenantService) Update(c context.Context, propertyID int, r TenantRequest) (*Tenant, error) {
	ret := _m.Called(c, propertyID, r)

	var r0 *Tenant
	if rf, ok := ret.Get(0).(func(context.Context, int, TenantRequest) *Tenant); ok {
		r0 = rf(c, propertyID, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, TenantRequest) error); ok {
		r1 = rf(c, propertyID, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockITenantService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockITenantService creates a new instance of MockITenantService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockITenantService(t mockConstructorTestingTNewMockITenantService) *MockITenantService {
	mock := &MockITenantService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
