// Code generated by mockery v2.13.1. DO NOT EDIT.

package payment

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockIPaymentService is an autogenerated mock type for the IPaymentService type
type MockIPaymentService struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, attributes
func (_m *MockIPaymentService) Create(c context.Context, attributes PaymentRequest) (*Payment, error) {
	ret := _m.Called(c, attributes)

	var r0 *Payment
	if rf, ok := ret.Get(0).(func(context.Context, PaymentRequest) *Payment); ok {
		r0 = rf(c, attributes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, PaymentRequest) error); ok {
		r1 = rf(c, attributes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: ctx, fromDate, toDate, pageNumber, itemsPerPage
func (_m *MockIPaymentService) Fetch(ctx context.Context, fromDate time.Time, toDate time.Time, pageNumber int, itemsPerPage int) ([]*Payment, error) {
	ret := _m.Called(ctx, fromDate, toDate, pageNumber, itemsPerPage)

	var r0 []*Payment
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time, int, int) []*Payment); ok {
		r0 = rf(ctx, fromDate, toDate, pageNumber, itemsPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time, int, int) error); ok {
		r1 = rf(ctx, fromDate, toDate, pageNumber, itemsPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByID provides a mock function with given fields: c, id
func (_m *MockIPaymentService) FetchByID(c context.Context, id int) (*Payment, error) {
	ret := _m.Called(c, id)

	var r0 *Payment
	if rf, ok := ret.Get(0).(func(context.Context, int) *Payment); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByTenant provides a mock function with given fields: ctx, tenantID, fromDate, pageNumber, itemsPerPage
func (_m *MockIPaymentService) FetchByTenant(ctx context.Context, tenantID int, fromDate time.Time, pageNumber int, itemsPerPage int) ([]*Payment, error) {
	ret := _m.Called(ctx, tenantID, fromDate, pageNumber, itemsPerPage)

	var r0 []*Payment
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, int, int) []*Payment); ok {
		r0 = rf(ctx, tenantID, fromDate, pageNumber, itemsPerPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time, int, int) error); ok {
		r1 = rf(ctx, tenantID, fromDate, pageNumber, itemsPerPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIPaymentService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIPaymentService creates a new instance of MockIPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIPaymentService(t mockConstructorTestingTNewMockIPaymentService) *MockIPaymentService {
	mock := &MockIPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
